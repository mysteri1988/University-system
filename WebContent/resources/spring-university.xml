<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:tx="http://www.springframework.org/schema/tx"
  xmlns:mvc="http://www.springframework.org/schema/mvc"
  xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/security 
        http://www.springframework.org/schema/security/spring-security-3.2.xsd">

  <!-- Add support for component scanning -->
  <context:component-scan
    base-package="com.foxminded.university" />

  <!-- Add support for conversion, formatting and validation support -->
  <mvc:annotation-driven
    conversion-service="conversionService" />

  <!-- Define Spring MVC view resolver -->
  <bean
    class="org.springframework.web.servlet.view.InternalResourceViewResolver">
    <property name="prefix" value="/WEB-INF/" />
    <property name="suffix" value=".jsp" />
  </bean>

  <!-- Step 1: Define Database DataSource / connection pool -->
  <bean id="myDataSource"
    class="com.mchange.v2.c3p0.ComboPooledDataSource"
    destroy-method="close">
    <property name="driverClass" value="org.postgresql.Driver" />
    <property name="jdbcUrl"
      value="jdbc:postgresql://localhost:5432/university?useSSL=false&amp;serverTimezone=UTC" />
    <property name="user" value="postgres" />
    <property name="password" value="54953032064" />

    <!-- these are connection pool properties for C3P0 -->
    <property name="initialPoolSize" value="5" />
    <property name="minPoolSize" value="5" />
    <property name="maxPoolSize" value="20" />
    <property name="maxIdleTime" value="30000" />
  </bean>

  <!-- Step 2: Setup Hibernate session factory -->
  <bean id="sessionFactory"
    class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
    <property name="dataSource" ref="myDataSource" />
    <property name="packagesToScan"
      value="com.foxminded.university.domain" />
    <property name="hibernateProperties">
      <props>
        <prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQL92Dialect</prop>
        <prop key="hibernate.show_sql">true</prop>
      </props>
    </property>
  </bean>

  <!-- Step 3: Setup Hibernate transaction manager -->
  <bean id="myTransactionManager"
    class="org.springframework.orm.hibernate5.HibernateTransactionManager">
    <property name="sessionFactory" ref="sessionFactory" />
  </bean>

  <!-- Step 4: Enable configuration of transactional behavior based on annotations -->
  <tx:annotation-driven
    transaction-manager="myTransactionManager" />

  <!-- Add support for reading web resources: css, images, js, etc ... -->
  <mvc:resources location="/resources/"
    mapping="/resources/**"></mvc:resources>

  <!-- Constructors for UI -->
  <bean id="loadListStudents"
    class="com.foxminded.university.ui.LoadListStudents">
    <constructor-arg ref="studentServiceImpl" />
  </bean>

  <bean id="conversionService"
    class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
    <property name="formatters">
      <set>
        <ref bean="groupFormatter" />
      </set>
    </property>
  </bean>

  <bean id="addStudent"
    class="com.foxminded.university.ui.AddStudent">
    <constructor-arg index="0" ref="studentServiceImpl" />
    <constructor-arg index="1" ref="groupServiceImpl" />
  </bean>

  <bean id="deleteStudent"
    class="com.foxminded.university.ui.DeleteStudent">
    <constructor-arg ref="studentServiceImpl" />
  </bean>

  <bean id="listGroups"
    class="com.foxminded.university.ui.ListGroups">
    <constructor-arg ref="groupServiceImpl" />
  </bean>

  <bean id="loadGroup"
    class="com.foxminded.university.ui.LoadGroup">
    <constructor-arg index="0" ref="studentServiceImpl" />
    <constructor-arg index="1" ref="groupServiceImpl" />
  </bean>

  <bean id="loadStudent"
    class="com.foxminded.university.ui.LoadStudent">
    <constructor-arg index="0" ref="studentServiceImpl" />
    <constructor-arg index="1" ref="groupServiceImpl" />
  </bean>

  <bean id="loadStudentForm"
    class="com.foxminded.university.ui.LoadStudentForm">
    <constructor-arg ref="groupServiceImpl" />
  </bean>

  <bean id="studentInformation"
    class="com.foxminded.university.ui.StudentInformation">
    <constructor-arg index="0" ref="studentServiceImpl" />
    <constructor-arg index="1" ref="groupServiceImpl" />
  </bean>

  <bean id="updateStudent"
    class="com.foxminded.university.ui.UpdateStudent">
    <constructor-arg index="0" ref="studentServiceImpl" />
    <constructor-arg index="1" ref="groupServiceImpl" />
  </bean>

  <!-- UI layer beans -->
  <bean id="groupFormatter"
    class="com.foxminded.university.ui.GroupFormatter">
    <constructor-arg ref="groupServiceImpl" />
  </bean>

  <!-- Service layer beans -->
  <bean id="studentServiceImpl"
    class="com.foxminded.university.service.StudentServiceImpl">
    <constructor-arg ref="studentDaoImpl" />
  </bean>

  <bean id="groupServiceImpl"
    class="com.foxminded.university.service.GroupServiceImpl">
    <constructor-arg ref="groupDaoImpl" />
  </bean>

  <!-- DAO layer beans -->
  <bean id="studentDaomImpl"
    class="com.foxminded.university.dao.StudentDaoImpl" />

  <bean id="groupDaoImpl"
    class="com.foxminded.university.dao.GroupDaoImpl" />

</beans>
